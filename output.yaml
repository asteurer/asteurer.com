---
# Source: asteurer-com/templates/main.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "asteurer-com-database-secrets"
  namespace: default
type: Opaque
data:
  postgres-password: "cGdwYXNz"
  postgres-user: "cGd1c3I="
---
# Source: asteurer-com/templates/main.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "asteurer-com-meme-manager-secrets"
  namespace: default
type: Opaque
data:
  aws-access-key: "YWNjZXNza2V5"
  aws-secret-key: "c2VjcmV0a2V5"
  aws-s3-region: "cmVnaW9u"
  aws-s3-bucket: "YnVja2V0"
  tg-bot-token: "dGd0b2tlbg=="
---
# Source: asteurer-com/templates/main.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "asteurer-com-cloudflared-secrets"
  namespace: default
type: Opaque
data:
  token: "Y2Z0b2tlbg=="
---
# Source: asteurer-com/templates/main.yaml
# Storing root context#############################################
###              Database                 ###
#############################################

# Load the schema.sql file
apiVersion: v1
kind: ConfigMap
metadata:
  name: "asteurer-com-database-schema"
data:
  schema.sql:     CREATE TABLE memes (
        id SERIAL PRIMARY KEY,
        url TEXT NOT NULL UNIQUE
    );
---
# Source: asteurer-com/templates/main.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "asteurer-com-db-pvc"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: asteurer-com/templates/main.yaml
apiVersion: v1
kind: Service
metadata:
  name: "asteurer-com-database"
  labels:
    app: "asteurer-com-database"
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: "asteurer-com-database"

#############################################
###             Meme Manager              ###
#############################################
---
# Source: asteurer-com/templates/main.yaml
apiVersion: v1
kind: Service
metadata:
  name: "asteurer-com-db-client"
  labels:
    app: "asteurer-com-db-client"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: "asteurer-com-db-client"

#############################################
###             Cloudflared               ###
#############################################
---
# Source: asteurer-com/templates/main.yaml
apiVersion: v1
kind: Service
metadata:
  name: "asteurer-com-front-end"
  labels:
    app: "asteurer-com-front-end"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: "asteurer-com-front-end"
---
# Source: asteurer-com/templates/main.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "asteurer-com-database"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "asteurer-com-database"
  template:
    metadata:
      labels:
        app: "asteurer-com-database"
    spec:
      containers:
        - name: "asteurer-com-database"
          image: "postgres:17"
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          env:
            - name: "POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "asteurer-com-database-secrets"
                  key: "postgres-password"
            - name: "POSTGRES_USER"
              valueFrom:
                secretKeyRef:
                  name: "asteurer-com-database-secrets"
                  key: "postgres-user"
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d/
              name: schema-volume
            - mountPath: /var/lib/postgresql/data
              name: db-storage
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"

      volumes:
        - name: schema-volume
          configMap:
            name: "asteurer-com-database-schema"
        - name: db-storage
          persistentVolumeClaim:
            claimName: "asteurer-com-db-pvc"
---
# Source: asteurer-com/templates/main.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "asteurer-com-meme-manager"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "asteurer-com-meme-manager"
  template:
    metadata:
      labels:
        app: "asteurer-com-meme-manager"
    spec:
      containers:
        - name: "asteurer-com-meme-manager"
          image: "ghcr.io/asteurer/asteurer.com-meme-manager"
          imagePullPolicy: Always
          env:
            - name: DB_CLIENT_URL
              value: "http://asteurer-com-db-client.default.svc.cluster.local:8080/meme"
            - name: "AWS_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  name: "asteurer-com-meme-manager-secrets"
                  key: "aws-access-key"
            - name: "AWS_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "asteurer-com-meme-manager-secrets"
                  key: "aws-secret-key"
            - name: "AWS_S3_REGION"
              valueFrom:
                secretKeyRef:
                  name: "asteurer-com-meme-manager-secrets"
                  key: "aws-s3-region"
            - name: "AWS_S3_BUCKET"
              valueFrom:
                secretKeyRef:
                  name: "asteurer-com-meme-manager-secrets"
                  key: "aws-s3-bucket"
            - name: "TG_BOT_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: "asteurer-com-meme-manager-secrets"
                  key: "tg-bot-token"

#############################################
###           Database Client             ###
#############################################
---
# Source: asteurer-com/templates/main.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "asteurer-com-db-client"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "asteurer-com-db-client"
  template:
    metadata:
      labels:
        app: "asteurer-com-db-client"
    spec:
      containers:
        - name: "asteurer-com-db-client"
          image: "ghcr.io/asteurer/asteurer.com-db-client"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: POSTGRES_HOST
              value: "asteurer-com-database"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DATABASE
              value: postgres
            - name: "POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "asteurer-com-database-secrets"
                  key: "postgres-password"
            - name: "POSTGRES_USER"
              valueFrom:
                secretKeyRef:
                  name: "asteurer-com-database-secrets"
                  key: "postgres-user"
---
# Source: asteurer-com/templates/main.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "asteurer-com-cloudflared"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "asteurer-com-cloudflared"
  template:
    metadata:
      labels:
        app: "asteurer-com-cloudflared"
    spec:
      containers:
        - name: "asteurer-com-cloudflared"
          image: "cloudflare/cloudflared:2025.4.0"
          imagePullPolicy: Always
          command: ["cloudflared", "tunnel", "--no-autoupdate", "run", "--token", "$(CF_TOKEN)"]
          env:
          - name: CF_TOKEN
            valueFrom:
              secretKeyRef:
                name: "asteurer-com-cloudflared-secrets"
                key: token

#############################################
###              Front End                ###
#############################################
---
# Source: asteurer-com/templates/main.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "asteurer-com-front-end"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "asteurer-com-front-end"
  template:
    metadata:
      labels:
        app: "asteurer-com-front-end"
    spec:
      containers:
        - name: "asteurer-com-front-end"
          image: "ghcr.io/asteurer/asteurer.com-front-end"
          imagePullPolicy: Always
          env:
            - name: API_URL
              value: http://asteurer-com-db-client.default.svc.cluster.local:8080
          ports:
            - containerPort: 8080
