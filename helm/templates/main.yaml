# Storing root context
{{- $root := . -}}

#############################################
###              Database                 ###
#############################################

# Load the schema.sql file
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.prefix }}-database-schema"
data:
  schema.sql: {{ .Files.Get "files/schema.sql" | indent 4 }}

---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Values.prefix }}-database-secrets"
  namespace: default
type: Opaque
data:
{{- range .Values.database.secrets }}
  {{ .name }}: "{{ .value | b64enc }}"
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.prefix }}-database"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.prefix }}-database"
  template:
    metadata:
      labels:
        app: "{{ .Values.prefix }}-database"
    spec:
      containers:
        - name: "{{ .Values.prefix }}-database"
          image: "{{ .Values.database.image }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          env:
            {{- range .Values.database.secrets }}
            - name: "{{ upper .name | replace "-" "_" }}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $root.Values.prefix }}-database-secrets"
                  key: "{{ .name }}"
            {{- end }}
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d/
              name: schema-volume
            - mountPath: /var/lib/postgresql/data
              name: db-storage
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"

      volumes:
        - name: schema-volume
          configMap:
            name: "{{ .Values.prefix }}-database-schema"
        - name: db-storage
          persistentVolumeClaim:
            claimName: "{{ .Values.prefix }}-db-pvc"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ .Values.prefix }}-db-pvc"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.prefix }}-database"
  labels:
    app: "{{ .Values.prefix }}-database"
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: "{{ .Values.prefix }}-database"

#############################################
###             Meme Manager              ###
#############################################

---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Values.prefix }}-meme-manager-secrets"
  namespace: default
type: Opaque
data:
{{- range .Values.memeManager.secrets }}
  {{ .name }}: "{{ .value | b64enc }}"
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.prefix }}-meme-manager"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.prefix }}-meme-manager"
  template:
    metadata:
      labels:
        app: "{{ .Values.prefix }}-meme-manager"
    spec:
      containers:
        - name: "{{ .Values.prefix }}-meme-manager"
          image: "{{ .Values.memeManager.image }}"
          imagePullPolicy: Always
          env:
            - name: DB_CLIENT_URL
              value: "http://{{ .Values.prefix }}-db-client.default.svc.cluster.local:8080/meme"
            {{- range .Values.memeManager.secrets }}
            - name: "{{ upper .name | replace "-" "_"}}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $root.Values.prefix }}-meme-manager-secrets"
                  key: "{{ .name }}"
            {{- end }}

#############################################
###           Database Client             ###
#############################################

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.prefix }}-db-client"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.prefix }}-db-client"
  template:
    metadata:
      labels:
        app: "{{ .Values.prefix }}-db-client"
    spec:
      containers:
        - name: "{{ .Values.prefix }}-db-client"
          image: "{{ .Values.dbClient.image }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: POSTGRES_HOST
              value: "{{ .Values.prefix }}-database"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DATABASE
              value: postgres
            {{- range .Values.database.secrets }}
            - name: "{{ upper .name | replace "-" "_"}}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $root.Values.prefix }}-database-secrets"
                  key: "{{ .name }}"
            {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.prefix }}-db-client"
  labels:
    app: "{{ .Values.prefix }}-db-client"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: "{{ .Values.prefix }}-db-client"

#############################################
###             Cloudflared               ###
#############################################

---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Values.prefix }}-cloudflared-secrets"
  namespace: default
type: Opaque
data:
  token: "{{ .Values.cloudflared.token | b64enc }}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.prefix }}-cloudflared"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.prefix }}-cloudflared"
  template:
    metadata:
      labels:
        app: "{{ .Values.prefix }}-cloudflared"
    spec:
      containers:
        - name: "{{ .Values.prefix }}-cloudflared"
          image: "{{ .Values.cloudflared.image }}"
          imagePullPolicy: Always
          command: ["cloudflared", "tunnel", "--no-autoupdate", "run", "--token", "$(CF_TOKEN)"]
          env:
          - name: CF_TOKEN
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.prefix }}-cloudflared-secrets"
                key: token

#############################################
###              Front End                ###
#############################################

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.prefix }}-front-end"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.prefix }}-front-end"
  template:
    metadata:
      labels:
        app: "{{ .Values.prefix }}-front-end"
    spec:
      containers:
        - name: "{{ .Values.prefix }}-front-end"
          image: "{{ .Values.frontEnd.image }}"
          imagePullPolicy: Always
          env:
            - name: API_URL
              value: http://{{ .Values.prefix }}-db-client.default.svc.cluster.local:8080
          ports:
            - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.prefix }}-front-end"
  labels:
    app: "{{ .Values.prefix }}-front-end"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: "{{ .Values.prefix }}-front-end"