# Storing root context
{{- $root := . -}}


#############################################
###             Meme Manager              ###
#############################################

---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Values.prefix }}-meme-manager-secrets"
  namespace: "{{ .Values.namespace }}"
type: Opaque
data:
{{- range .Values.memeManager.secrets }}
  {{ .name }}: "{{ .value | b64enc }}"
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.prefix }}-meme-manager"
  namespace: "{{ .Values.namespace }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.prefix }}-meme-manager"
  template:
    metadata:
      labels:
        app: "{{ .Values.prefix }}-meme-manager"
    spec:
      affinity:
        podAntiAffinity: # Make sure servers aren't scheduled on same node
          preferredDuringSchedulingIgnoredDuringExecution: # Set to 'preferred' just in case we have a single-node cluster
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: "{{ .Values.prefix }}-meme-manager"
              topologyKey: kubernetes.io/hostname
      containers:
        - name: "{{ .Values.prefix }}-meme-manager"
          image: "{{ .Values.memeManager.image }}"
          imagePullPolicy: Always
          env:
            - name: DB_CLIENT_ENDPOINT
              value: "http://{{ .Values.prefix }}-db-client.{{ .Values.namespace }}.svc.cluster.local:8080"
            {{- range .Values.memeManager.secrets }}
            - name: "{{ upper .name | replace "-" "_"}}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $root.Values.prefix }}-meme-manager-secrets"
                  key: "{{ .name }}"
            {{- end }}

#############################################
###           Database Client             ###
#############################################

---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Values.prefix }}-dbclient-secrets"
  namespace: "{{ .Values.namespace }}"
type: Opaque
data:
{{- range .Values.dbClient.secrets }}
  {{ .name }}: "{{ .value | b64enc }}"
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.prefix }}-db-client"
  namespace: "{{ .Values.namespace }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.prefix }}-db-client"
  template:
    metadata:
      labels:
        app: "{{ .Values.prefix }}-db-client"
    spec:
      affinity:
        podAntiAffinity: # Make sure servers aren't scheduled on same node
          preferredDuringSchedulingIgnoredDuringExecution: # Set to 'preferred' just in case we have a single-node cluster
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: "{{ .Values.prefix }}-db-client"
              topologyKey: kubernetes.io/hostname
      containers:
        - name: "{{ .Values.prefix }}-db-client"
          image: "{{ .Values.dbClient.image }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            {{- range .Values.dbClient.secrets }}
            - name: "{{ upper .name | replace "-" "_"}}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $root.Values.prefix }}-dbclient-secrets"
                  key: "{{ .name }}"
            {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.prefix }}-db-client"
  namespace: "{{ .Values.namespace }}"
  labels:
    app: "{{ .Values.prefix }}-db-client"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: "{{ .Values.prefix }}-db-client"

#############################################
###              Front End                ###
#############################################

---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Values.prefix }}-frontend-secrets"
  namespace: "{{ .Values.namespace }}"
type: Opaque
data:
{{- range .Values.frontEnd.secrets }}
  {{ .name }}: "{{ .value | b64enc }}"
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.prefix }}-front-end"
  namespace: "{{ .Values.namespace }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.prefix }}-front-end"
  template:
    metadata:
      labels:
        app: "{{ .Values.prefix }}-front-end"
    spec:
      affinity:
        podAntiAffinity: # Make sure servers aren't scheduled on same node
          preferredDuringSchedulingIgnoredDuringExecution: # Set to 'preferred' just in case we have a single-node cluster
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: "{{ .Values.prefix }}-front-end"
              topologyKey: kubernetes.io/hostname
      containers:
        - name: "{{ .Values.prefix }}-front-end"
          image: "{{ .Values.frontEnd.image }}"
          imagePullPolicy: Always
          env:
            - name: NODE_TLS_REJECT_UNAUTHORIZED # Disables SSL certificate validation (same as mc --insecure)
              value: "0"
            - name: DB_CLIENT_ENDPOINT
              value: http://{{ .Values.prefix }}-db-client.{{ .Values.namespace }}.svc.cluster.local:8080
            {{- range .Values.frontEnd.secrets }}
            - name: "{{ upper .name | replace "-" "_"}}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $root.Values.prefix }}-frontend-secrets"
                  key: "{{ .name }}"
            {{- end }}
          ports:
            - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.prefix }}-front-end"
  namespace: "{{ .Values.namespace }}"
  labels:
    app: "{{ .Values.prefix }}-front-end"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: "{{ .Values.prefix }}-front-end"


#############################################
###             Cloudflared               ###
#############################################

---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Values.prefix }}-cloudflared-secrets"
  namespace: "{{ .Values.namespace }}"
type: Opaque
data:
  token: "{{ .Values.cloudflared.token | b64enc }}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.prefix }}-cloudflared"
  namespace: "{{ .Values.namespace }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.prefix }}-cloudflared"
  template:
    metadata:
      labels:
        app: "{{ .Values.prefix }}-cloudflared"
    spec:
      containers:
        - name: "{{ .Values.prefix }}-cloudflared"
          image: "{{ .Values.cloudflared.image }}"
          imagePullPolicy: Always
          command: ["cloudflared", "tunnel", "--no-autoupdate", "run", "--token", "$(CF_TOKEN)"]
          env:
          - name: CF_TOKEN
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.prefix }}-cloudflared-secrets"
                key: token